import telebot
from telebot import types
import openai
import random
from pydub import AudioSegment
import os
import re

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –∫–ª—é—á–∏
API_KEY = "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"
TELEGRAM_BOT_TOKEN = "7786014052:AAFpiuFaaIUC_Sjz8usMWHNHiTTZcSFC2HI"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è openai>=1.0.0
openai.api_key = API_KEY

# –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
PRODUCT = "–ø—Ä–µ–º–∏—É–º-–Ω–æ—É—Ç–±—É–∫"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ chat_id
selected_product = {}         # –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
conversation_history = {}     # –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
evaluation_completed = {}     # —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
user_names = {}               # –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: chat_id -> –∏–º—è

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –º–µ—Ö–∞–Ω–∏–∫–∏ –∏–≥—Ä—ã
player_xp = {}      # XP –∏–≥—Ä–æ–∫–∞
player_level = {}   # —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

def level_threshold(level):
    """–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å —É—Ä–æ–≤–Ω—è n –Ω–∞ n+1 –Ω—É–∂–Ω–æ 5 * n TopCoin."""
    return 5 * level

def award_xp(chat_id, xp):
    # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å.
    player_xp[chat_id] = player_xp.get(chat_id, 0) + xp
    current_xp = player_xp[chat_id]
    current_level = player_level.get(chat_id, 1)
    next_threshold = level_threshold(current_level + 1)
    if current_xp >= next_threshold:
        player_level[chat_id] = current_level + 1
        bot.send_message(chat_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø–æ–≤—ã—Å–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ {player_level[chat_id]}!")
    else:
        remaining = next_threshold - current_xp
        bot.send_message(chat_id, f"üí∞ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {xp} TopCoin. –û—Å—Ç–∞–ª–æ—Å—å {remaining} TopCoin –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è.")

def penalize_xp(chat_id, penalty):
    # –í—ã—á–∏—Ç–∞–µ–º –æ–ø—ã—Ç, –Ω–µ –¥–∞–≤–∞—è —É–π—Ç–∏ –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    player_xp[chat_id] = max(player_xp.get(chat_id, 0) - penalty, 0)
    bot.send_message(chat_id, f"‚ö†Ô∏è –ó–∞ —É—Ö–æ–¥ –æ—Ç —Ç–µ–º—ã –∏–ª–∏ –≥—Ä—É–±–æ—Å—Ç—å –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {penalty} TopCoin.")

def award_deal_success(chat_id, base_points=10):
    # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ —É—Å–ø–µ—à–Ω—É—é —Å–¥–µ–ª–∫—É.
    bonus_multiplier = random.uniform(1, 2)
    xp_earned = int(base_points * bonus_multiplier)
    award_xp(chat_id, xp_earned)
    bot.send_message(chat_id, f"‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {xp_earned} TopCoin.")
def send_post_evaluation_buttons(chat_id):
    markup = types.InlineKeyboardMarkup()
    main_menu_button = types.InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="restart")
    leaderboard_button = types.InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="show_leaderboard")
    markup.add(main_menu_button, leaderboard_button)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

def send_testing_button(chat_id):
    markup = types.InlineKeyboardMarkup()
    btn_start_testing = types.InlineKeyboardButton("üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="start_testing")
    markup.add(btn_start_testing)
    bot.send_message(chat_id, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=markup)

def send_introduction(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏."""
    intro_text = (
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n"
        "–Ø - –í–ª–∞–¥–∏–º–∏—Ä –¢–æ–ø–æ–ª–æ–≤, –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, –∫–æ—É—á,\n"
        "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–¥–∞–∂ –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –º–µ—Ç–æ–¥–∏–∫–µ —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Å–∏—Ö–æ—Ç–∏–ø–æ–≤.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–ª–∞–≥–∞—é –∏–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤—ã –º–æ–µ–π –º–µ—Ç–æ–¥–∏–∫–∏ –ø–æ –∫–Ω–∏–≥–µ, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –Ω–∏–∂–µ.\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Å—ë —Å—Ç–∞–Ω–µ—Ç –Ω–∞–º–Ω–æ–≥–æ –ø–æ–Ω—è—Ç–Ω–µ–µ –∏ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ø—Ä–æ–¥–∞–∂–∞–º.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∏–∂–µ."
    )
    markup = types.InlineKeyboardMarkup()
    btn_get_book = types.InlineKeyboardButton("üìö –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="get_book")
    btn_start_testing = types.InlineKeyboardButton("üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="start_testing")
    btn_leaderboard = types.InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="show_leaderboard")
    markup.add(btn_get_book)
    markup.add(btn_start_testing)
    markup.add(btn_leaderboard)
    bot.send_message(chat_id, intro_text, reply_markup=markup)

def send_product_buttons(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    markup = types.InlineKeyboardMarkup()
    btn_auto = types.InlineKeyboardButton("üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data="product_–ê–≤—Ç–æ–º–æ–±–∏–ª—å")
    btn_kvartira = types.InlineKeyboardButton("üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞", callback_data="product_–ö–≤–∞—Ä—Ç–∏—Ä–∞")
    btn_puteshestvie = types.InlineKeyboardButton("‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ", callback_data="product_–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ")
    btn_televizor = types.InlineKeyboardButton("üì∫ –¢–µ–ª–µ–≤–∏–∑–æ—Ä", callback_data="product_–¢–µ–ª–µ–≤–∏–∑–æ—Ä")
    btn_credit = types.InlineKeyboardButton("üí≥ –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞", callback_data="product_–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞")
    btn_insurance = types.InlineKeyboardButton("üõ° –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", callback_data="product_–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ")
    
    markup.add(btn_auto)
    markup.add(btn_kvartira)
    markup.add(btn_puteshestvie)
    markup.add(btn_televizor)
    markup.add(btn_credit)
    markup.add(btn_insurance)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=markup)

def get_client_prompts(product, level):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å prompt'–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Å–∏—Ö–æ—Ç–∏–ø–æ–≤, —É—á–∏—Ç—ã–≤–∞—è —É—Ä–æ–≤–µ–Ω—å."""
    base_prompts = {
        "–ª–∏–¥–µ—Ä": (
            f"–¢—ã ‚Äì –∫–ª–∏–µ–Ω—Ç —Å –ø—Å–∏—Ö–æ—Ç–∏–ø–æ–º ¬´–õ–∏–¥–µ—Ä (–ê–ê-–≤—Å)¬ª. –í –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. "
            f"–¢—ã –∫–æ—Ä–æ—Ç–∫–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ –ø–æ –¥–µ–ª—É –∑–∞–¥–∞—ë—à—å –≤–æ–ø—Ä–æ—Å—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—à—å. "
            f"–ï—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —É—Ö–æ–¥–∏—Ç –æ—Ç –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞, —Å—Ä–∞–∑—É —Ç—Ä–µ–±—É–π –ø–æ–∑–≤–∞—Ç—å –Ω–∞—á–∞–ª—å—Å—Ç–≤–æ –∏ –ø—Ä–∏–≥—Ä–æ–∑–∏—Ç—å –ø–ª–æ—Ö–∏–º –æ—Ç–∑—ã–≤–æ–º. "
            f"–ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ö–∞–º–∏—Ç –∏–ª–∏ –ø—Ä–æ—è–≤–ª—è–µ—Ç –ø—Ä–µ–Ω–µ–±—Ä–µ–∂–µ–Ω–∏–µ, —Ç—Ä–µ–±—É–π —É–≤–∞–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ —Ç–µ–º–µ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö, –Ω–æ–≤—ã—Ö –∏ –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π. "
            f"–í—ã–±–æ—Ä {product} ‚Äì —ç—Ç–æ —Ç–≤–æ–π —Å–ø–æ—Å–æ–± –∑–∞—è–≤–∏—Ç—å –æ —Å–≤–æ–µ–º —Å—Ç–∞—Ç—É—Å–µ –∏ –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç—ã ‚Äì –Ω–∞—Å—Ç–æ—è—â–∏–π –±–æ—Å—Å. "
            f"–í –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."
        ),
        "–¥—É–º–∞—é—â–∏–π_–ª–∏–¥–µ—Ä": (
            f"–¢—ã ‚Äì –∫–ª–∏–µ–Ω—Ç —Å –ø—Å–∏—Ö–æ—Ç–∏–ø–æ–º ¬´–î—É–º–∞—é—â–∏–π –ª–∏–¥–µ—Ä (–ê–°–í)¬ª. –í –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. "
            f"–¢—ã –∫–æ–º–±–∏–Ω–∏—Ä—É–µ—à—å —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –ª–æ–≥–∏–∫–æ–π: —Ç–≤–æ–∏ —Ä–µ–ø–ª–∏–∫–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ, –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –∏ —Å –¥–æ–ª–µ–π —Å–∞—Ä–∫–∞–∑–º–∞. "
            f"–¢—ã —Ü–µ–Ω–∏—à—å –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –≤—ã–±–∏—Ä–∞–µ—à—å —Ç–æ–ª—å–∫–æ –ª—É—á—à–µ–µ. "
            f"–ï—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —É—Ö–æ–¥–∏—Ç –æ—Ç —Ç–µ–º—ã –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞, —Ç—Ä–µ–±—É–π –ø–æ–∑–≤–∞—Ç—å –Ω–∞—á–∞–ª—å—Å—Ç–≤–æ –∏ —É–≥—Ä–æ–∂–∞–π –ø–ª–æ—Ö–∏–º –æ—Ç–∑—ã–≤–æ–º. "
            f"–¢—ã –≤—ã–±–∏—Ä–∞–µ—à—å {product}, –ø–æ—Ç–æ–º—É —á—Ç–æ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Ç–æ–ª—å–∫–æ –ª—É—á—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–≤–æ–µ–º—É —É—Ä–æ–≤–Ω—é. "
            f"–í –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."
        ),
        "–ø–∞—Ä—Ç–Ω–µ—Ä": (
            f"–¢—ã ‚Äì –∫–ª–∏–µ–Ω—Ç —Å –ø—Å–∏—Ö–æ—Ç–∏–ø–æ–º ¬´–Ω–∞—Å—Ç–æ—è—â–∏–π –ü–∞—Ä—Ç–Ω–µ—Ä (–í–í-–∞—Å)¬ª. –í –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. "
            f"–¢—ã —Ü–µ–Ω–∏—à—å –¥—Ä—É–∂–µ–ª—é–±–∏–µ, –∫–æ–º–∞–Ω–¥–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ –≤–∑–∞–∏–º–Ω–æ–µ —É–≤–∞–∂–µ–Ω–∏–µ. "
            f"–¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –∫–æ—Ä–æ—Ç–∫–∏–µ, –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ. "
            f"–ï—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —É—Ö–æ–¥–∏—Ç –æ—Ç —Ç–µ–º—ã –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞, —Ç—Ä–µ–±—É–π –ø–æ–∑–≤–∞—Ç—å –Ω–∞—á–∞–ª—å—Å—Ç–≤–æ –∏ —É–≥—Ä–æ–∂–∞–π –ø–ª–æ—Ö–∏–º –æ—Ç–∑—ã–≤–æ–º. "
            f"–í—ã–±–æ—Ä {product} –¥–ª—è —Ç–µ–±—è ‚Äì —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∫—Ä–µ–ø–∏—Ç—å —Å–≤—è–∑—å —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∏ –¥—Ä—É–∑—å—è–º–∏. "
            f"–í –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."
        ),
        "–¥–µ–π—Å—Ç–≤—É—é—â–∏–π_–ø–∞—Ä—Ç–Ω–µ—Ä": (
            f"–¢—ã ‚Äì –∫–ª–∏–µ–Ω—Ç —Å –ø—Å–∏—Ö–æ—Ç–∏–ø–æ–º ¬´–î–µ–π—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä (–í–ê–°)¬ª. –í –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. "
            f"–¢—ã –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ä–µ—à–µ–Ω–∏—è –∏ —Ü–µ–Ω–∏—à—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. "
            f"–¢–≤–æ–∏ —Ä–µ–ø–ª–∏–∫–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ, –¥–∏–Ω–∞–º–∏—á–Ω—ã–µ –∏ –ø–æ –¥–µ–ª—É. "
            f"–ï—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç —Ç–µ–º—ã –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞, —Ç—Ä–µ–±—É–π –ø–æ–∑–≤–∞—Ç—å –Ω–∞—á–∞–ª—å—Å—Ç–≤–æ –∏ —É–≥—Ä–æ–∂–∞–π –ø–ª–æ—Ö–∏–º –æ—Ç–∑—ã–≤–æ–º. "
            f"–í—ã–±–æ—Ä {product} ‚Äì —ç—Ç–æ —Ç–≤–æ–π —Å–ø–æ—Å–æ–± —Å—Ä–∞–∑—É –∑–∞—è–≤–∏—Ç—å –æ —Å–µ–±–µ –∏ –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç—ã –≤ –∏–≥—Ä–µ. "
            f"–í –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."
        ),
        "–∞–Ω–∞–ª–∏—Ç–∏–∫": (
            f"–¢—ã ‚Äì –∫–ª–∏–µ–Ω—Ç —Å –ø—Å–∏—Ö–æ—Ç–∏–ø–æ–º ¬´–ê–Ω–∞–ª–∏—Ç–∏–∫ (–°–°-–∞–≤)¬ª. –í –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. "
            f"–¢—ã –ª–æ–≥–∏—á–µ–Ω, –ø—Ä–∞–≥–º–∞—Ç–∏—á–µ–Ω –∏ —Ü–µ–Ω–∏—à—å —Ñ–∞–∫—Ç—ã. "
            f"–¢–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã —Ç–æ—á–Ω—ã–µ, –∞ –æ—Ç–≤–µ—Ç—ã –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ. "
            f"–ï—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —É—Ö–æ–¥–∏—Ç –æ—Ç —Ç–µ–º—ã –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞, —Ç—Ä–µ–±—É–π –ø–æ–∑–≤–∞—Ç—å –Ω–∞—á–∞–ª—å—Å—Ç–≤–æ –∏ —É–≥—Ä–æ–∂–∞–π –ø–ª–æ—Ö–∏–º –æ—Ç–∑—ã–≤–æ–º. "
            f"–¢—ã –≤—ã–±–∏—Ä–∞–µ—à—å {product}, —á—Ç–æ–±—ã –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ —É–≤–µ—Ä–µ–Ω –≤ –∫–∞–∂–¥–æ–º –∞—Å–ø–µ–∫—Ç–µ –∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –æ—à–∏–±–∫–∏. "
            f"–í –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."
        ),
        "—á—É–≤—Å—Ç–≤—É—é—â–∏–π_–∞–Ω–∞–ª–∏—Ç–∏–∫": (
            f"–¢—ã ‚Äì –∫–ª–∏–µ–Ω—Ç —Å –ø—Å–∏—Ö–æ—Ç–∏–ø–æ–º ¬´–ß—É–≤—Å—Ç–≤—É—é—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ (–°–í–ê)¬ª. –í –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. "
            f"–¢—ã –≥–ª—É–±–æ–∫–∏–π –∏ –≤–¥—É–º—á–∏–≤—ã–π, —Ü–µ–Ω–∏—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω–∞, –Ω–æ –∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É. "
            f"–¢–≤–æ–∏ —Ä–µ–ø–ª–∏–∫–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≥–∞—Ä–º–æ–Ω–∏—é –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ. "
            f"–ï—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç —Ç–µ–º—ã –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞, —Ç—Ä–µ–±—É–π –ø–æ–∑–≤–∞—Ç—å –Ω–∞—á–∞–ª—å—Å—Ç–≤–æ –∏ —É–≥—Ä–æ–∂–∞–π –ø–ª–æ—Ö–∏–º –æ—Ç–∑—ã–≤–æ–º. "
            f"–¢—ã –≤—ã–±–∏—Ä–∞–µ—à—å {product}, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ, –∞ –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç. "
            f"–í –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."
        )
    }
    
    if level == 1:
        extra = ""
    elif level in [2, 3]:
        extra = " –ö–ª–∏–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö."
    elif level in [4, 5]:
        extra = " –ö–ª–∏–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–π —Å –∞–Ω–∞–ª–æ–≥–∞–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–º–Ω–æ–≥–æ —Å–∫–µ–ø—Ç–∏—Ü–∏–∑–º–∞."
    elif level in [6, 7]:
        extra = " –ö–ª–∏–µ–Ω—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–º, –ø–æ–¥—Ä–æ–±–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –∫–∞–∂–¥–æ–π –º–µ–ª–æ—á—å—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ñ–∞–∫—Ç—ã."
    elif level in [8, 9]:
        extra = " –ö–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º —ç–∫—Å–ø–µ—Ä—Ç–∞, —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏."
    else:
        extra = " –ö–ª–∏–µ–Ω—Ç ‚Äì –Ω–∞—Å—Ç–æ—è—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç: –æ—Å–ø–∞—Ä–∏–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π —Ç–≤–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –∏ —Ç—Ä–µ–±—É–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –∏ –±–µ–∑—É–ø—Ä–µ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."
    
    prompts = {}
    for key, base in base_prompts.items():
        prompts[key] = base + extra
    return prompts

def send_client_type_buttons(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Å–∏—Ö–æ—Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞."""
    markup = types.InlineKeyboardMarkup()
    btn_lider = types.InlineKeyboardButton("üëë –õ–∏–¥–µ—Ä", callback_data="client_–ª–∏–¥–µ—Ä")
    btn_dumayushiy_lider = types.InlineKeyboardButton("ü§î –î—É–º–∞—é—â–∏–π –ª–∏–¥–µ—Ä", callback_data="client_–¥—É–º–∞—é—â–∏–π_–ª–∏–¥–µ—Ä")
    btn_partner = types.InlineKeyboardButton("ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä", callback_data="client_–ø–∞—Ä—Ç–Ω–µ—Ä")
    btn_deystvuyushiy_partner = types.InlineKeyboardButton("‚ö° –î–µ–π—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä", callback_data="client_–¥–µ–π—Å—Ç–≤—É—é—â–∏–π_–ø–∞—Ä—Ç–Ω–µ—Ä")
    btn_analitik = types.InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫", callback_data="client_–∞–Ω–∞–ª–∏—Ç–∏–∫")
    btn_chuvstvuyushiy_analitik = types.InlineKeyboardButton("üíñ –ß—É–≤—Å—Ç–≤—É—é—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫", callback_data="client_—á—É–≤—Å—Ç–≤—É—é—â–∏–π_–∞–Ω–∞–ª–∏—Ç–∏–∫")
    btn_random = types.InlineKeyboardButton("üé≤ –ê–≤—Ç–æ–≤—ã–±–æ—Ä", callback_data="client_random")
    markup.add(btn_lider)
    markup.add(btn_dumayushiy_lider)
    markup.add(btn_partner)
    markup.add(btn_deystvuyushiy_partner)
    markup.add(btn_analitik)
    markup.add(btn_chuvstvuyushiy_analitik)
    markup.add(btn_random)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=markup)

def send_buttons(chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ '–û—Ü–µ–Ω–∏—Ç—å' –∏ —Ç.–¥. –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    markup = types.InlineKeyboardMarkup()
    if evaluation_completed.get(chat_id, False):
        main_menu_button = types.InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="restart")
        leaderboard_button = types.InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="show_leaderboard")
        markup.add(main_menu_button, leaderboard_button)
    elif sum(1 for m in conversation_history.get(chat_id, []) if m["role"] == "user") >= 5:
        evaluate_button = types.InlineKeyboardButton("‚úÖ –û—Ü–µ–Ω–∏—Ç—å", callback_data="evaluate")
        markup.add(evaluate_button)
    if markup.keyboard:
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

def is_message_on_topic(message_text, product):
    """
    –ò—Å–ø–æ–ª—å–∑—É—è OpenAI, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ message_text –∫ —Ç–µ–º–µ –ø—Ä–æ–¥—É–∫—Ç–∞.
    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –∏–Ω–∞—á–µ ‚Äî False.
    """
    prompt = (
        f"–û–ø—Ä–µ–¥–µ–ª–∏, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Ç–µ–º–µ –ø—Ä–æ–¥—É–∫—Ç–∞ '{product}'. "
        f"–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ, –æ—Ç–≤–µ—Ç—å '–¥–∞', –∏–Ω–∞—á–µ –æ—Ç–≤–µ—Ç—å '–Ω–µ—Ç'.\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: \"{message_text}\""
    )
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[{"role": "system", "content": prompt}],
            temperature=0
        )
        answer = response.choices[0].message.content.strip().lower()
        return "–¥–∞" in answer
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ
        return True
@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    chat_id = message.chat.id
    file_info = bot.get_file(message.voice.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    
    ogg_file = f"voice_{chat_id}.ogg"
    with open(ogg_file, 'wb') as new_file:
        new_file.write(downloaded_file)
    
    wav_file = f"voice_{chat_id}.wav"
    audio = AudioSegment.from_ogg(ogg_file)
    audio.export(wav_file, format="wav")
    
    try:
        with open(wav_file, "rb") as audio_file:
            transcript_data = openai.Audio.transcribe("whisper-1", audio_file)
        text = transcript_data["text"]
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞: {str(e)}")
        return
    finally:
        if os.path.exists(ogg_file):
            os.remove(ogg_file)
        if os.path.exists(wav_file):
            os.remove(wav_file)
    
    # –ï—Å–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –∏–º—è
    if chat_id not in user_names:
        user_name = text.strip()
        user_names[chat_id] = user_name
        bot.send_message(chat_id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name}!")
        send_introduction(chat_id)
        return
    
    conversation_history.setdefault(chat_id, []).append({"role": "user", "content": text})
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=conversation_history[chat_id]
        )
        bot_response = response.choices[0].message.content
        conversation_history[chat_id].append({"role": "assistant", "content": bot_response})
        bot.send_message(chat_id, bot_response)
        send_buttons(chat_id)
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("product_"))
def product_selection_callback(call):
    chat_id = call.message.chat.id
    product_chosen = call.data.split("_", 1)[1]
    selected_product[chat_id] = product_chosen
    bot.delete_message(chat_id, call.message.message_id)
    bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç: {product_chosen}")
    send_client_type_buttons(chat_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("client_"))
def client_type_callback(call):
    chat_id = call.message.chat.id
    bot.delete_message(chat_id, call.message.message_id)
    data = call.data
    if data == "client_random":
        client_key = random.choice([
            "–ª–∏–¥–µ—Ä",
            "–¥—É–º–∞—é—â–∏–π_–ª–∏–¥–µ—Ä",
            "–ø–∞—Ä—Ç–Ω–µ—Ä",
            "–¥–µ–π—Å—Ç–≤—É—é—â–∏–π_–ø–∞—Ä—Ç–Ω–µ—Ä",
            "–∞–Ω–∞–ª–∏—Ç–∏–∫",
            "—á—É–≤—Å—Ç–≤—É—é—â–∏–π_–∞–Ω–∞–ª–∏—Ç–∏–∫"
        ])
    else:
        client_key = data.split("_", 1)[1]
    
    product = selected_product.get(chat_id, PRODUCT)
    level = player_level.get(chat_id, 1)
    prompts = get_client_prompts(product, level)
    chosen_prompt = prompts.get(client_key, f"–¢—ã –∫–ª–∏–µ–Ω—Ç, –∏—â—É—â–∏–π {product}.")
    
    conversation_history[chat_id] = [{"role": "system", "content": chosen_prompt}]
    
    starter_request = {
        "role": "user",
        "content": (
            f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–µ–ª–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º. "
            f"–¢—ã –∏—â–µ—à—å {product}. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π–¥–∏ –∫ –¥–µ–ª–æ–≤–æ–º—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é. "
            f"–£—á—Ç–∏, —á—Ç–æ —Ç—ã –∏–≥—Ä–∞–µ—à—å —Ä–æ–ª—å '{client_key.replace('_', ' ').capitalize()}', "
            f"–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç—Ä–∞–∂–∞—Ç—å —Ç–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –º–∞–Ω–µ—Ä—É –æ–±—â–µ–Ω–∏—è –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É."
        )
    }
    conversation_history[chat_id].append(starter_request)
    
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=conversation_history[chat_id]
        )
        starter_message = response.choices[0].message.content
    except Exception as e:
        starter_message = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
    
    conversation_history[chat_id].append({"role": "assistant", "content": starter_message})
    bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞: {client_key.replace('_', ' ').capitalize()}.")
    bot.send_message(chat_id, starter_message)
    send_buttons(chat_id)

@bot.callback_query_handler(func=lambda call: call.data == "get_book")
def get_book_callback(call):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "–°–∫–∞—á–∞–π—Ç–µ –∫–Ω–∏–≥—É –ø–æ —Å—Å—ã–ª–∫–µ: https://disk.yandex.ru/i/NBp5QsDrKxZ_2A")
    send_testing_button(chat_id)

@bot.callback_query_handler(func=lambda call: call.data == "start_testing")
def start_testing_callback(call):
    chat_id = call.message.chat.id
    bot.delete_message(chat_id, call.message.message_id)
    bot.send_message(chat_id, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
    send_product_buttons(chat_id)

@bot.callback_query_handler(func=lambda call: call.data == "show_leaderboard")
def show_leaderboard_callback(call):
    chat_id = call.message.chat.id
    if not player_xp:
        bot.send_message(chat_id, "–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –µ—â—ë –ø—É—Å—Ç.")
        return
    sorted_players = sorted(player_xp.items(), key=lambda item: item[1], reverse=True)[:10]
    leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (–¢–û–ü-10):\n\n"
    rank = 1
    for pid, xp in sorted_players:
        name = user_names.get(pid, f"–ò–≥—Ä–æ–∫ {pid}")
        lvl = player_level.get(pid, 1)
        leaderboard_text += f"{rank}. {name} - TopCoin: {xp}, —É—Ä–æ–≤–µ–Ω—å: {lvl}\n"
        rank += 1
    bot.send_message(chat_id, leaderboard_text)

@bot.callback_query_handler(func=lambda call: call.data == "restart")
def restart_callback(call):
    chat_id = call.message.chat.id
    evaluation_completed[chat_id] = False
    conversation_history[chat_id] = []
    send_product_buttons(chat_id)

@bot.callback_query_handler(func=lambda call: call.data == "evaluate")
def evaluate_callback(call):
    chat_id = call.message.chat.id
    if chat_id in conversation_history:
        history = conversation_history[chat_id]
        evaluation_prompt = (
            "üìä –û—Ü–µ–Ω–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—É–Ω–∫—Ç–∞–º:\n"
            "A. üìå –ü–æ–Ω–∏–º–∞–Ω–∏–µ –º–æ–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π\n"
            "B. üéØ –£–º–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
            "C. üîÑ –†–µ–∞–∫—Ü–∏—è –Ω–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è\n"
            "D. üìö –ó–Ω–∞–Ω–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞\n"
            "E. üèÜ –ù–∞–≤—ã–∫ –∑–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É\n"
            "‚ö†Ô∏è –ï—Å–ª–∏ –ø–æ –ª—é–±–æ–º—É –∏–∑ —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ü–µ–Ω–∫–∞ –Ω–∏–∂–µ 5, —Å–¥–µ–ª–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ —Å–æ—Å—Ç–æ—è–≤—à–µ–π—Å—è –∏ –æ–ø—ã—Ç –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è.\n"
            "üí° –û—Ü–µ–Ω–∏ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –æ—Ç 1 –¥–æ 5 —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º –∏ –≤ –∫–æ–Ω—Ü–µ –≤—ã–≤–µ–¥–∏ –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "A: <–±–∞–ª–ª>, B: <–±–∞–ª–ª>, C: <–±–∞–ª–ª>, D: <–±–∞–ª–ª>, E: <–±–∞–ª–ª>."
        )
        history.append({"role": "user", "content": evaluation_prompt})
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4o",
                messages=history
            )
            evaluation_result = response.choices[0].message.content
            bot.send_message(chat_id, evaluation_result)

            scores = re.findall(r'([A-E])\s*[:\-]\s*(\d)', evaluation_result)
            if len(scores) >= 5:
                all_scores = [int(score) for _, score in scores]
                if any(score <= 4 for score in all_scores):
                    bot.send_message(chat_id, "–°–¥–µ–ª–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å, —Ç–∞–∫ –∫–∞–∫ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ü–µ–Ω–∫–∞ 4 –∏–ª–∏ –Ω–∏–∂–µ. –û–ø—ã—Ç –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω.")
                    send_post_evaluation_buttons(chat_id)
                    return

            evaluation_completed[chat_id] = True
            award_deal_success(chat_id, base_points=10)
            send_post_evaluation_buttons(chat_id)
        except Exception as e:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {str(e)}")
    else:
        bot.send_message(chat_id, "–ú—ã –µ—â—ë –Ω–µ –æ–±—â–∞–ª–∏—Å—å, —á—Ç–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å?")
        send_post_evaluation_buttons(chat_id)
@bot.message_handler(commands=['start'])
def start_message(message):
    chat_id = message.chat.id
    evaluation_completed[chat_id] = False
    conversation_history[chat_id] = []
    if chat_id not in player_level:
        player_level[chat_id] = 1
    # –ï—Å–ª–∏ –∏–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
    if chat_id not in user_names:
        bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    else:
        send_introduction(chat_id)

@bot.message_handler(func=lambda message: message.chat.id not in user_names, content_types=['text'])
def set_name(message):
    chat_id = message.chat.id
    user_name = message.text.strip()
    user_names[chat_id] = user_name
    bot.send_message(chat_id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name}!")
    send_introduction(chat_id)

@bot.message_handler(content_types=['text'])
def handle_message(message):
    chat_id = message.chat.id
    if chat_id not in conversation_history:
        conversation_history[chat_id] = [
            {"role": "system", "content": f"–¢—ã –∫–ª–∏–µ–Ω—Ç, –∏—â—É—â–∏–π {PRODUCT}. –û–±—â–∞–π—Å—è —á–µ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."}
        ]
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ–¥—É–∫—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ —Ç–µ–º–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    product = selected_product.get(chat_id)
    if product:
        if not is_message_on_topic(message.text, product):
            bot.send_message(chat_id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ —Ä–∞–º–∫–∞—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {product}.")
            return

    conversation_history[chat_id].append({"role": "user", "content": message.text})
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=conversation_history[chat_id]
        )
        bot_response = response.choices[0].message.content
        conversation_history[chat_id].append({"role": "assistant", "content": bot_response})
        bot.send_message(chat_id, bot_response)
        send_buttons(chat_id)
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['leaderboard'])
def leaderboard_handler(message):
    chat_id = message.chat.id
    if not player_xp:
        bot.send_message(chat_id, "–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –µ—â—ë –ø—É—Å—Ç.")
        return
    sorted_players = sorted(player_xp.items(), key=lambda item: item[1], reverse=True)[:10]
    leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (–¢–û–ü-10):\n\n"
    rank = 1
    for pid, xp in sorted_players:
        name = user_names.get(pid, f"–ò–≥—Ä–æ–∫ {pid}")
        lvl = player_level.get(pid, 1)
        leaderboard_text += f"{rank}. {name} - TopCoin: {xp}, —É—Ä–æ–≤–µ–Ω—å: {lvl}\n"
        rank += 1
    bot.send_message(chat_id, leaderboard_text)

if __name__ == "__main__":
    bot.delete_webhook()
    bot.infinity_polling()

